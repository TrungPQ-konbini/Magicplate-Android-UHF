Index: app/src/main/java/com/konbini/magicplateuhf/ui/registerTags/RegisterTagsFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.konbini.magicplateuhf.ui.registerTags\r\n\r\nimport android.content.BroadcastReceiver\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.content.IntentFilter\r\nimport android.os.Bundle\r\nimport android.text.Html\r\nimport android.util.Log\r\nimport androidx.fragment.app.Fragment\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.AdapterView\r\nimport android.widget.ArrayAdapter\r\nimport android.widget.SearchView\r\nimport androidx.fragment.app.viewModels\r\nimport androidx.lifecycle.lifecycleScope\r\nimport androidx.localbroadcastmanager.content.LocalBroadcastManager\r\nimport androidx.recyclerview.widget.DividerItemDecoration\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport com.konbini.magicplateuhf.AppContainer\r\nimport com.konbini.magicplateuhf.MainApplication\r\nimport com.konbini.magicplateuhf.R\r\nimport com.konbini.magicplateuhf.data.entities.PlateModelEntity\r\nimport com.konbini.magicplateuhf.data.entities.TagEntity\r\nimport com.konbini.magicplateuhf.data.remote.plateModel.request.Data\r\nimport com.konbini.magicplateuhf.databinding.FragmentRegisterTagsBinding\r\nimport com.konbini.magicplateuhf.utils.*\r\nimport dagger.hilt.android.AndroidEntryPoint\r\nimport kotlinx.coroutines.delay\r\nimport kotlinx.coroutines.flow.collect\r\nimport kotlinx.coroutines.launch\r\n\r\n@AndroidEntryPoint\r\nclass RegisterTagsFragment : Fragment(), SearchView.OnQueryTextListener,\r\n    AdapterView.OnItemSelectedListener {\r\n\r\n    companion object {\r\n        const val TAG = \"RegisterTagsFragment\"\r\n    }\r\n\r\n    private var serialNumber = 0\r\n    private var lastSerialNumber = \"\"\r\n\r\n    private var processing = false\r\n    private lateinit var selectedPlateModel: PlateModelEntity\r\n    private lateinit var adapter: RegisterTagsAdapter\r\n\r\n    private var listSetPlateModelDataRequest: MutableList<Data> = mutableListOf()\r\n    private var listPLateModelsSync: MutableList<PlateModelEntity> = mutableListOf()\r\n    private var dataTags: ArrayList<TagEntity> = ArrayList()\r\n\r\n    private var binding: FragmentRegisterTagsBinding by autoCleared()\r\n    private val viewModel: RegisterTagsViewModel by viewModels()\r\n\r\n    private val changeTagReceiver = object : BroadcastReceiver() {\r\n        override fun onReceive(context: Context?, intent: Intent?) {\r\n            when (intent?.action) {\r\n                \"REFRESH_TAGS\" -> {\r\n                    if (!AppContainer.GlobalVariable.allowWriteTags) {\r\n                        // Refresh tags\r\n                        dataTags = ArrayList(AppContainer.CurrentTransaction.listTagEntity)\r\n                        dataTags.sortBy { tagEntity -> tagEntity.strEPC }\r\n                        adapter.setItems(dataTags)\r\n                        setTitleButtonRegister()\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View {\r\n        binding = FragmentRegisterTagsBinding.inflate(inflater, container, false)\r\n        return binding.root\r\n    }\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        viewModel.syncPlateModels()\r\n        setupSpinner()\r\n        setupRecyclerView()\r\n        setupObservers()\r\n        setupActions()\r\n        setTitleButtonRegister()\r\n\r\n\r\n    }\r\n\r\n    override fun onStart() {\r\n        super.onStart()\r\n        val filterIntent = IntentFilter()\r\n        filterIntent.addAction(\"REFRESH_TAGS\")\r\n        LocalBroadcastManager.getInstance(requireContext())\r\n            .registerReceiver(changeTagReceiver, IntentFilter(filterIntent))\r\n    }\r\n\r\n    override fun onStop() {\r\n        LocalBroadcastManager.getInstance(requireContext()).unregisterReceiver(changeTagReceiver)\r\n        super.onStop()\r\n    }\r\n\r\n    private fun View.setSafeOnClickListener(onSafeClick: (View) -> Unit) {\r\n        val safeClickListener = SafeClickListener {\r\n            onSafeClick(it)\r\n        }\r\n        setOnClickListener(safeClickListener)\r\n    }\r\n\r\n    private fun setupSpinner() {\r\n        val listPlatesModel = AppContainer.GlobalVariable.listPlatesModel\r\n        val listPlatesCode: MutableList<String> = mutableListOf()\r\n        listPlatesModel.forEach { _plateModelEntity ->\r\n            listPlatesCode.add(\"${_plateModelEntity.plateModelCode} - ${_plateModelEntity.plateModelTitle}\")\r\n        }\r\n        binding.spinnerPlateModelCode.setLabel(getString(R.string.title_plate_code))\r\n\r\n        val adapterSpinner =\r\n            ArrayAdapter(requireContext(), android.R.layout.simple_spinner_item, listPlatesCode)\r\n        adapterSpinner.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)\r\n        binding.spinnerPlateModelCode.setAdapter(adapterSpinner)\r\n\r\n        binding.spinnerPlateModelCode.getSpinner().onItemSelectedListener = this\r\n    }\r\n\r\n    private fun setupRecyclerView() {\r\n        adapter = RegisterTagsAdapter()\r\n        val manager = LinearLayoutManager(requireContext())\r\n        binding.recyclerViewTags.layoutManager = manager\r\n        binding.recyclerViewTags.adapter = adapter\r\n\r\n        val mDividerItemDecoration = DividerItemDecoration(\r\n            binding.recyclerViewTags.context,\r\n            LinearLayoutManager.VERTICAL\r\n        )\r\n        binding.recyclerViewTags.addItemDecoration(mDividerItemDecoration)\r\n    }\r\n\r\n    @Suppress(\"UNCHECKED_CAST\")\r\n    private fun setupObservers() {\r\n        viewLifecycleOwner.lifecycleScope.launchWhenStarted {\r\n            viewModel.state.collect() { _state ->\r\n                when (_state.status) {\r\n                    Resource.Status.LOADING -> {\r\n                        showHideLoading(true)\r\n                    }\r\n                    Resource.Status.SUCCESS -> {\r\n                        listPLateModelsSync = _state.data as MutableList<PlateModelEntity>\r\n                        AppContainer.GlobalVariable.listPlatesModel = listPLateModelsSync\r\n                        //writeTags()\r\n                        //AlertDialogUtil.showSuccess(_state.message, requireContext())\r\n                        LogUtils.logInfo(\"Sync Plate Models success\")\r\n                        showHideLoading(false)\r\n                    }\r\n                    Resource.Status.ERROR -> {\r\n                        showHideLoading(false)\r\n                        AlertDialogUtil.showError(_state.message, requireContext())\r\n                        LogUtils.logInfo(\"Sync Plate Models error\")\r\n                    }\r\n                    else -> {}\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun setupActions() {\r\n        binding.searchTags.setOnQueryTextListener(this)\r\n\r\n//        binding.buttonRegisterTags.setSafeOnClickListener {\r\n//            viewModel.syncPlateModels()\r\n//        }\r\n\r\n        binding.btnGetLastNumber.setSafeOnClickListener {\r\n            viewModel.syncPlateModels()\r\n        }\r\n\r\n        binding.btnEndSession.setSafeOnClickListener {\r\n            viewModel.setPlateModelData(ArrayList(listSetPlateModelDataRequest))\r\n        }\r\n\r\n        binding.btnStartWriting.setSafeOnClickListener {\r\n            writeTags()\r\n        }\r\n    }\r\n\r\n    private fun writeTags() {\r\n        if (!::selectedPlateModel.isInitialized) {\r\n            AlertDialogUtil.showWarning(\r\n                getString(R.string.message_warning_new_plate_code_required),\r\n                requireContext()\r\n            )\r\n            return\r\n        }\r\n        if (dataTags.isNotEmpty()) {\r\n            try {\r\n                AppContainer.GlobalVariable.allowWriteTags = true\r\n                writeTags(0)\r\n            } catch (ex: Exception) {\r\n                showHideLoading(false)\r\n                AlertDialogUtil.showError(\r\n                    ex.message.toString(),\r\n                    requireContext()\r\n                )\r\n                LogUtils.logError(ex)\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun setTitleButtonRegister() {\r\n        if (dataTags.isEmpty()) {\r\n            val titleButton = getString(R.string.title_register_tags).replace(\" %s\", \"\")\r\n           // binding.buttonRegisterTags.text = titleButton\r\n        } else {\r\n            val titleButton = String.format(getString(R.string.title_register_tags), dataTags.size)\r\n           // binding.buttonRegisterTags.text = titleButton\r\n        }\r\n    }\r\n\r\n    override fun onQueryTextSubmit(p0: String?): Boolean {\r\n        return false\r\n    }\r\n\r\n    override fun onQueryTextChange(searchText: String): Boolean {\r\n        viewLifecycleOwner.lifecycleScope.launch {\r\n            adapter.customFilter(searchText, ArrayList(dataTags))\r\n        }\r\n        return false\r\n    }\r\n\r\n    private fun showHideLoading(show: Boolean) {\r\n        if (show) {\r\n            binding.loadingPanel.visibility = View.VISIBLE\r\n            binding.contentPanel.visibility = View.GONE\r\n        } else {\r\n            binding.loadingPanel.visibility = View.GONE\r\n            binding.contentPanel.visibility = View.VISIBLE\r\n        }\r\n        processing = show\r\n    }\r\n\r\n    override fun onItemSelected(p0: AdapterView<*>?, p1: View?, position: Int, p3: Long) {\r\n        val listPlatesModel = AppContainer.GlobalVariable.listPlatesModel.toList().reversed()\r\n        if (listPlatesModel.isNotEmpty()) {\r\n           // p0?.getItemIdAtPosition(position)\r\n            selectedPlateModel = listPlatesModel[position]\r\n            val text = \"Last Serial Number: <b>${selectedPlateModel.lastPlateSerial}</b>\"\r\n            lastSerialNumber = selectedPlateModel.lastPlateSerial\r\n            binding.txtLastSerialNumber.setText(Html.fromHtml(text))\r\n        }\r\n    }\r\n\r\n    override fun onNothingSelected(p0: AdapterView<*>?) {}\r\n\r\n    private fun setNewEPC(oldEPC: String): String {\r\n        if (serialNumber == 0) {\r\n            listPLateModelsSync.forEach { _plateModelEntity ->\r\n                if (selectedPlateModel.plateModelCode == _plateModelEntity.plateModelCode) {\r\n                    val lastPlateSerial = _plateModelEntity.lastPlateSerial.toInt(16)\r\n                    serialNumber = lastPlateSerial + 1\r\n                }\r\n            }\r\n        } else {\r\n            serialNumber += 1\r\n        }\r\n\r\n        val newPlateModel = \"%02X\".format(selectedPlateModel.plateModelCode.toInt())\r\n        val newSerialNumber = \"%06X\".format(serialNumber)\r\n\r\n        return oldEPC.replace(oldEPC.substring(0, 2), newPlateModel)\r\n            .replace(oldEPC.substring(4, 10), newSerialNumber)\r\n    }\r\n\r\n    private fun writeTags(position: Int) {\r\n        lifecycleScope.launch {\r\n            try {\r\n                if (position < dataTags.size) {\r\n                    val tag = dataTags[position]\r\n                    val epcValue = tag.strEPC ?: \"\"\r\n                    if (epcValue.isEmpty()) return@launch\r\n\r\n                    // Select tag\r\n                    val epcMatch = UhfUtil.setAccessEpcMatch(epcValue, requireContext(), getString(R.string.message_error_param_unknown_error))\r\n                    LogUtils.logInfo(\"[epcMatch] | $epcMatch\")\r\n                    if (epcMatch != -1) {\r\n                        val newEPC = setNewEPC(epcValue)\r\n                        LogUtils.logInfo(\"New EPC: $newEPC | ${newEPC.substring(0, 2).toInt(16)} | ${newEPC.substring(4, 10).toInt(16)}\")\r\n                        //Log.e(\"NEW_EPC\", \"New EPC: $newEPC | ${newEPC.substring(0, 2).toInt(16)} | ${newEPC.substring(4, 10).toInt(16)}\")\r\n                        delay(150)\r\n                        val writeTag = UhfUtil.writeTag(newEPC, requireContext(), getString(R.string.message_error_write_data_format))\r\n                        LogUtils.logInfo(\"[writeTag] | $writeTag\")\r\n                        if (writeTag != -1) {\r\n                            // Add serials for submit to server\r\n                            val data = Data(\r\n                                plateModelId = selectedPlateModel.plateModelId.toInt(),\r\n                                lastPlateSerial = newEPC.substring(4, 10)\r\n                            )\r\n                            listSetPlateModelDataRequest.add(data)\r\n                        }\r\n                    }\r\n                    delay(150)\r\n                    writeTags(position + 1)\r\n                } else {\r\n                    showHideLoading(false)\r\n                    if (dataTags.size == listSetPlateModelDataRequest.size) {\r\n\r\n                        AlertDialogUtil.showSuccess(\r\n                            getString(R.string.message_success_register_tags),\r\n                            requireContext()\r\n                        )\r\n\r\n                        // Sync last serial to server\r\n                        //viewModel.setPlateModelData(ArrayList(listSetPlateModelDataRequest))\r\n                    } else {\r\n                        AlertDialogUtil.showError(\r\n                            getString(R.string.message_error_some_tag_write_error),\r\n                            requireContext(),\r\n                            getString(R.string.title_register_failed)\r\n                        )\r\n                        serialNumber = 0\r\n                        listSetPlateModelDataRequest.clear()\r\n                    }\r\n\r\n                    AppContainer.GlobalVariable.allowWriteTags = false\r\n                    delay(150)\r\n                    //MainApplication.mReaderUHF.resetInventoryBuffer(0xff.toByte())\r\n                    // Start reading UHF\r\n                    MainApplication.mReaderUHF.realTimeInventory(0xff.toByte(), 0x01.toByte())\r\n                }\r\n\r\n            } catch (ex: Exception) {\r\n                LogUtils.logError(ex)\r\n            }\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/konbini/magicplateuhf/ui/registerTags/RegisterTagsFragment.kt	(revision 04df7a1fd838d9a8d077f8f717635c500c202d27)
+++ app/src/main/java/com/konbini/magicplateuhf/ui/registerTags/RegisterTagsFragment.kt	(date 1651825101043)
@@ -185,6 +185,16 @@
         binding.btnStartWriting.setSafeOnClickListener {
             writeTags()
         }
+
+        binding.btnStartScan.setSafeOnClickListener {
+            AppContainer.GlobalVariable.allowReadTags = false
+
+            MainApplication.mReaderUHF.realTimeInventory(0xff.toByte(), 0x01.toByte())
+            Log.e(
+                MainApplication.TAG,
+                "==========Start command reading UHF=========="
+            )
+        }
     }
 
     private fun writeTags() {
@@ -307,19 +317,19 @@
                     showHideLoading(false)
                     if (dataTags.size == listSetPlateModelDataRequest.size) {
 
-                        AlertDialogUtil.showSuccess(
-                            getString(R.string.message_success_register_tags),
-                            requireContext()
-                        )
+//                        AlertDialogUtil.showSuccess(
+//                            getString(R.string.message_success_register_tags),
+//                            requireContext()
+//                        )
 
                         // Sync last serial to server
                         //viewModel.setPlateModelData(ArrayList(listSetPlateModelDataRequest))
                     } else {
-                        AlertDialogUtil.showError(
-                            getString(R.string.message_error_some_tag_write_error),
-                            requireContext(),
-                            getString(R.string.title_register_failed)
-                        )
+//                        AlertDialogUtil.showError(
+//                            getString(R.string.message_error_some_tag_write_error),
+//                            requireContext(),
+//                            getString(R.string.title_register_failed)
+//                        )
                         serialNumber = 0
                         listSetPlateModelDataRequest.clear()
                     }
@@ -328,7 +338,7 @@
                     delay(150)
                     //MainApplication.mReaderUHF.resetInventoryBuffer(0xff.toByte())
                     // Start reading UHF
-                    MainApplication.mReaderUHF.realTimeInventory(0xff.toByte(), 0x01.toByte())
+                    //MainApplication.mReaderUHF.realTimeInventory(0xff.toByte(), 0x01.toByte())
                 }
 
             } catch (ex: Exception) {
